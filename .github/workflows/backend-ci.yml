name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.5.1"
  COVERAGE_THRESHOLD: "90"
  PYTHONPATH: ${{ github.workspace }}/src/backend

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies
        run: |
          cd src/backend
          poetry install --no-interaction --no-root

      - name: Run black
        run: |
          cd src/backend
          poetry run black . --check

      - name: Run isort
        run: |
          cd src/backend
          poetry run isort . --check-only --profile black

      - name: Run mypy
        run: |
          cd src/backend
          poetry run mypy src tests

      - name: Run flake8
        run: |
          cd src/backend
          poetry run flake8 src tests

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: lint

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies
        run: |
          cd src/backend
          poetry install --no-interaction --no-root

      - name: Run unit tests
        run: |
          cd src/backend
          poetry run pytest tests/unit -v -m "unit" --junitxml=junit/unit-test-results.xml

      - name: Run integration tests
        run: |
          cd src/backend
          poetry run pytest tests/integration -v -m "integration" --junitxml=junit/integration-test-results.xml

      - name: Run E2E tests
        run: |
          cd src/backend
          poetry run pytest tests/e2e -v -m "e2e" --junitxml=junit/e2e-test-results.xml

      - name: Generate coverage report
        run: |
          cd src/backend
          poetry run pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            src/backend/coverage.xml
            src/backend/htmlcov
            src/backend/junit
          retention-days: 14

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Run Bandit security scan
        run: |
          cd src/backend
          bandit -r src -f json -o security-report.json

      - name: Run Safety check
        run: |
          cd src/backend
          safety check -r poetry.lock --json > safety-report.json

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            src/backend/security-report.json
            src/backend/safety-report.json
          retention-days: 30

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()

    steps:
      - name: Check workflow status
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: Notify Slack on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Backend CI pipeline failed! Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Backend CI pipeline succeeded! Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.SLACK_WEBHOOK }}