name: Web Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'src/web/**'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options:
          - staging
          - production
        description: 'Deployment environment'

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  IMAGE_NAME: coreos/web
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  DEPLOY_PERCENTAGE: 10
  HEALTH_CHECK_TIMEOUT: 300

concurrency:
  group: web-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: src/web
          file: infrastructure/docker/web.dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

  deploy:
    needs: [build]
    runs-on: self-hosted
    environment:
      name: production
      url: https://app.coreos.com
    steps:
      - name: Configure Kubernetes
        run: |
          echo "$KUBE_CONFIG" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Canary Deployment
        run: |
          kubectl patch deployment coreos-web -n coreos -p '
          {
            "spec": {
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 1,
                  "maxUnavailable": 0
                },
                "type": "RollingUpdate"
              },
              "template": {
                "spec": {
                  "containers": [{
                    "name": "web",
                    "image": "${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
                  }]
                }
              }
            }
          }'

      - name: Health Check
        run: |
          kubectl rollout status deployment/coreos-web -n coreos --timeout=${{ env.HEALTH_CHECK_TIMEOUT }}s
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Full Rollout
        if: success()
        run: |
          kubectl scale deployment coreos-web -n coreos --replicas=3
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Rollback
        if: failure()
        run: |
          kubectl rollout undo deployment/coreos-web -n coreos
          echo "::error::Deployment failed, rolling back to previous version"
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Cleanup
        if: always()
        run: |
          rm -f kubeconfig.yaml