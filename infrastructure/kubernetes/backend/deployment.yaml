apiVersion: apps/v1
kind: Deployment
metadata:
  name: coreos-backend
  namespace: coreos
  labels:
    app.kubernetes.io/name: coreos-backend
    app.kubernetes.io/part-of: coreos-platform
    app.kubernetes.io/component: backend
    app.kubernetes.io/managed-by: terraform
  annotations:
    kubernetes.io/description: "COREos backend FastAPI deployment"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    security.policy/version: "v1.0"
    backup.policy/enabled: "true"

spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  selector:
    matchLabels:
      app.kubernetes.io/name: coreos-backend
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coreos-backend
        app.kubernetes.io/part-of: coreos-platform
        app.kubernetes.io/component: backend
    
    spec:
      containers:
      - name: backend
        image: "{{ .Values.backend.image }}:{{ .Values.backend.tag }}"
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "2000m"
            memory: "2Gi"
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
        
        envFrom:
        - configMapRef:
            name: coreos-config
        - secretRef:
            name: coreos-secrets
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: coreos-backend
              topologyKey: kubernetes.io/hostname
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: coreos-backend
              topologyKey: topology.kubernetes.io/zone
      
      terminationGracePeriodSeconds: 60