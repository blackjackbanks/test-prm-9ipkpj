# Grafana Deployment Manifest
# Version: grafana/grafana:9.5.0
# Purpose: Deploys Grafana visualization platform with HA, security hardening and monitoring capabilities

---
# Persistent Volume Claim for Grafana storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: coreos
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: coreos-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${GRAFANA_STORAGE_SIZE}
  storageClassName: standard

---
# ConfigMap for Grafana datasource configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: coreos
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: coreos-platform
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        version: 1
        editable: false
        jsonData:
          timeInterval: "15s"
          queryTimeout: "30s"
          httpMethod: "POST"
          
      - name: Jaeger
        type: jaeger
        access: proxy
        url: http://jaeger-service:16686
        editable: false
        
      - name: Loki
        type: loki
        access: proxy
        url: http://loki-service:3100
        editable: false
        jsonData:
          maxLines: 1000

---
# ConfigMap for Grafana dashboard configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: coreos
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: coreos-platform
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'COREos Platform'
        orgId: 1
        folder: 'COREos'
        type: file
        disableDeletion: true
        editable: false
        options:
          path: /etc/grafana/provisioning/dashboards

---
# Service for Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: coreos
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: coreos-platform
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: grafana

---
# Deployment for Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coreos-grafana
  namespace: coreos
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: coreos-platform
    app.kubernetes.io/managed-by: terraform
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/part-of: coreos-platform
    spec:
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - grafana
                topologyKey: kubernetes.io/hostname
      
      # Security context for container hardening
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
        readOnlyRootFilesystem: true
      
      containers:
        - name: grafana
          image: grafana/grafana:9.5.0
          imagePullPolicy: IfNotPresent
          
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,grafana-polystat-panel"
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: "false"
            - name: GF_SECURITY_COOKIE_SECURE
              value: "true"
          
          # Resource limits and requests
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          
          # Volume mounts for persistent storage and configuration
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
              readOnly: false
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
          
          # Health checks
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 30
      
      # Volume definitions
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
            defaultMode: 420
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
            defaultMode: 420
      
      terminationGracePeriodSeconds: 60

---
# Network Policy for Grafana
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: coreos
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: coreos
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: coreos
      ports:
        - protocol: TCP
          port: 9090 # Prometheus
        - protocol: TCP
          port: 16686 # Jaeger
        - protocol: TCP
          port: 3100 # Loki